import numpy as np

def riemann_integral(num_points):
    """
    Calculate the integral using Riemann sum.
    """
    dx = 1 / num_points
    dy = 1 / num_points
    dz = 1 / num_points

    total_sum = 0

    for i in range(num_points):
        for j in range(num_points):
            for k in range(num_points):
                x = (i + 0.5) * dx
                y = (j + 0.5) * dy
                z = (k + 0.5) * dz
                total_sum += (3 * x**2 + y**2 + 2 * z**2) * dx * dy * dz

    return total_sum

def monte_carlo_integral(num_samples):
    """
    Calculate the integral using Monte Carlo method.
    """
    samples = np.random.rand(num_samples, 3)  # Generate random points in [0, 1]^3
    x, y, z = samples[:, 0], samples[:, 1], samples[:, 2]

    values = 3 * x**2 + y**2 + 2 * z**2
    average_value = np.mean(values)

    volume = 1  # Volume of the integration region [0, 1]^3
    return average_value * volume

# Parameters
num_points = 100  # For Riemann method
num_samples = 100000  # For Monte Carlo method

# Compute integrals
riemann_result = riemann_integral(num_points)
monte_carlo_result = monte_carlo_integral(num_samples)

print(f"Riemann Integral Result (num_points={num_points}): {riemann_result}")
print(f"Monte Carlo Integral Result (num_samples={num_samples}): {monte_carlo_result}")
